(define (variable? x)
  (symbol? x))
(define (same-variable? v1 v2)
  (and (variable? v1) (variable? v2) (eq? v1 v2)))
(define (=number? exp num)
  (and (number? exp) (= exp num)))
(define (make-sum e1 e2)
  (cond ((=number? e1 0) e2)
        ((=number? e2 0) e1)
        ((and (number? e1) (number? e2))
         (+ e1 e2))
        (else (list '+ e1 e2))))
(define (make-product m1 m2)
  (cond ((or (=number? m1 0) (=number? m2 0)) 0)
        ((=number? m1 1) m2)
        ((=number? m2 1) m1)
        ((and (number? m1) (number? m2)) (* m1 m2))
        (else (list '* m1 m2))))
(define (sum? e)
  (and (pair? e) (eq? (car e) '+)))
(define (addend sum)
  (cadr sum))
(define (augend sum)
  (caddr sum))
(define (product? e)
  (and (pair? e) (eq? (car e) '*)))
(define (multiplier p)
  (cadr p))
(define (multiplicand p)
  (caddr p))

(define (deriv exp var)
  (cond ((number? exp) 0)
    ((variable? exp) (if (same-variable? exp var) 1 0))
    ((sum? exp) (make-sum (deriv (addend exp) var)
                          (deriv (augend exp) var)))
    ((product? exp)
     (make-sum 
       (make-product (multiplier exp)
               (deriv (multiplicand exp) var))
       (make-product (deriv (multiplier exp) var)
                     (multiplicand exp))))
    (else
      (error "unknow expession type" exp))))

(display (deriv '(* (* x y) (+ x 3)) 'x))
(newline)
